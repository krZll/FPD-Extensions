// Scale engraving example.


function extend(obj, src) {
    for (var key in src) {
        if (src.hasOwnProperty(key)) obj[key] = src[key];
    }
    return obj;
}

// Needs a focussed frontpanel.
if (!HasFrontpanel())
    Error(__("Bitte erzeugen Sie erst eine Frontplatte.|Please create a frontpanel first."));

// Default settings
var settings = { 
	Shape : 0,
	LinLog: 0,
	Size: 30,
	SAngle: -10,
	EAngle: 190,
	Ticks: 10,
	SubTicks: 4,
	TickLen: 5,
	SubTickLen: 3,
	BaseLine: 1,
	TickLabel: 0,
	LabelDist: 3
};

// Check if selected object is scale
var sel = frontpanel.Selection();
var is_new = true;
var alt_x = 0, alt_y = 0;
if ( sel.length == 1 && (sel[0].IsGroup() || sel[0].IsHpglEngraving()) ) {
	var ei = sel[0].ExtInfo().split("|&#");
	alt_x = sel[0].X(); alt_y = sel[0].Y();
	if (ei.length == 2 && ei[0] == "ScaleGen") {
		settings = extend( settings, eval(ei[1]) );
		is_new = false;
	}
}

// Dialog for settings
var dia = new Dialog("Scale");

var p_shape = new Param(settings["Shape"]);
var p_linlog = new Param(settings["LinLog"]);
var p_startangle = new Param(settings["SAngle"]);
var p_endangle = new Param(settings["EAngle"]);
var p_size = new Param(settings["Size"]);
var p_ticks = new Param(settings["Ticks"]);
var p_subticks = new Param(settings["SubTicks"]);
var p_ticklen = new Param(settings["TickLen"]);
var p_subticklen = new Param(settings["SubTickLen"]);
var p_baseline = new Param(settings["BaseLine"]);
var p_ticklabel = new Param(settings["TickLabel"]);
var p_labeldist = new Param(settings["LabelDist"]);

dia.VSpacer(5).Newline().Spacer(10);
dia.Box().NewlineC();

if (is_new) {
	dia.Text(__("Neue Skala erstellen:|Choose parameters for scale:|Choisir des parametres pour la gravure:"));
} else {
	dia.Text(__("Ausgewählte Skala bearbeiten"));
}

dia.VSpacer(5).NewlineC().Divider().VSpacer(10).NewlineC();

dia.RadioBox(p_shape, "Form der Skala:\nRund\nLinear").Spacer(25).NewlineC();

dia.RadioBox(p_linlog, "Skalierung:\nLinear\nLogarithmisch").Spacer(25).NewlineC();

dia.BoxC().NewlineC().Text("Radius bzw. Länge:");
dia.SpinValue(p_size, 0, 10000, 1).Spacer(3).Text("mm").EndBox().NewlineC();
dia.BoxC().NewlineC().Text("Anfangswinkel:");
dia.SpinValue(p_startangle, -360, 360, 5).Spacer(3).Text("deg").EndBox().NewlineC();
dia.BoxC().NewlineC().Text("Endwinkel:");
dia.SpinValue(p_endangle, -360, 360, 5).Spacer(3).Text("deg").EndBox().NewlineC();


dia.VSpacer(5).NewlineC();
dia.Box().NewlineC().Text("Anzahl Skalenstriche:");
dia.SpinValue(p_ticks, 0, 10000, 1);
dia.Text("Länge:");
dia.SpinValue(p_ticklen, 0, 10000, 1).Spacer(3).Text("mm").EndBox();
dia.Spacer(10);

dia.VSpacer(5).NewlineC();
dia.Box().NewlineC().Text("Anzahl Teilstriche:");
dia.SpinValue(p_subticks, 0, 10000, 1);
dia.Text("Länge:");
dia.SpinValue(p_subticklen, 0, 10000, 1).Spacer(3).Text("mm").EndBox();
dia.Spacer(10);

dia.NewlineC().CheckBox(p_baseline, "Grundĺinie").Spacer(5).NewlineC();
dia.Spacer(10);

dia.NewlineC().CheckBox(p_ticklabel, "Beschriftung hinzufügen").Spacer(5).NewlineC();
dia.BoxC().NewlineC().Text("Abstand Beschriftung:");
dia.SpinValue(p_labeldist, 0, 10000, 1).Spacer(3).Text("mm").EndBox().NewlineC();

dia.Newline().VSpacer(0);
dia.NewlineC().VSpacer(5).Divider().NewlineC();
dia.Spacer(0).DlgButton(0, "Abbruch").Spacer(5).DlgButton(1, "Ok").Spacer(0);

dia.EndBox().Spacer(10).VSpacer(5);

if (1 == dia.Show()) {	// "Ok" button pressed
	var shape = p_shape.get();
	var linlog = p_linlog.get();
	var size = p_size.get();
	var startangle = p_startangle.get();
	var endangle = p_endangle.get();
	var numticks = p_ticks.get();
	var numsubticks = p_subticks.get();
	var size = p_size.get();
	var ticklen = p_ticklen.get();
	var subticklen = p_subticklen.get();
	var baseline = p_baseline.get();
	var ticklabel = p_ticklabel.get();
	var labeldist = p_labeldist.get();

	if (ticklabel) {
		var g = new Group("scale");
	}

	var hpgl = new HpglEngraving("hpgl-canvas1", "", hpgl_center, 100, 0, 0);
	hpgl.SetRefPoint(hpgl_file);
	frontpanel.AddElement(hpgl,0,0);
	var pen_tick =  0;
	if (numsubticks > 0) var pen_subtick = hpgl.DefinePen(engrave_jet_black, engraver_0_2mm);
	var pen_base = hpgl.DefinePen(engrave_jet_black, engraver_0_2mm);
	if (shape == 0) {
		// Round scale
	    	var phi = (endangle - startangle) * Math.PI / 180;
		var sub_phi = phi / (numticks - 1);
		var start_phi = startangle * Math.PI /180;   

		var x_start, y_start;
		var akt_phi;
		for (i = 0; i < numticks; ++i) {
			if (linlog == 0) {
				akt_phi = start_phi + (phi * i / (numticks-1));
			} else {
				akt_phi = start_phi + phi * Math.log(1 + 9 * i / (numticks-1) ) / Math.log(10);
			}
			var x_n = -Math.cos(akt_phi);
			var y_n = Math.sin(akt_phi);
			var x = x_n * size; var y= y_n * size;
			if (i == 0) {
				x_start = x; y_start = y;
			}
			hpgl.ChangePen(pen_tick);
			hpgl.Start(x,y);
			hpgl.LineTo(x_n * (size + ticklen), y_n * (size + ticklen));
			hpgl.Finish();
			if (ticklabel) {
				var t = new TextEngraving("", i+1);
				t.SetAlignment(align_center);
				frontpanel.AddElement(t,x_n * (size + ticklen + labeldist), y_n * (size + ticklen + labeldist));
				g.AddElement(t);
			}
			if ( i < (numticks-1) ) {
				var akt_sphi;
				for (j=0; j<numsubticks; j++) {
					if (linlog == 0) {			
						akt_sphi = akt_phi + sub_phi * (j+1) / (numsubticks +1);
					} else {
						akt_sphi = start_phi + phi * Math.log( 1 + 9 * (i + (j+1) / (numsubticks +1)) / (numticks-1) ) / Math.log(10);
					}
					var sx_n = -Math.cos(akt_sphi);
					var sy_n = Math.sin(akt_sphi);
					hpgl.ChangePen(pen_subtick);
					hpgl.Start(sx_n * size, sy_n * size);
					hpgl.LineTo(sx_n * (size + subticklen), sy_n * (size + subticklen));
					hpgl.Finish();
				}
			}
		}
	} else {
		// Linear scale
		x_start = y_start = 0;
		var x;
		for (i = 0; i < numticks; ++i) {
			if (linlog == 0) {
				x = i * size / (numticks-1);
			} else {
				x = size * Math.log(1 + (9) * i / (numticks-1) ) / Math.log(10);
			}
			hpgl.ChangePen(pen_tick);
			hpgl.Start(x,0);
			hpgl.LineTo(x, ticklen);
			hpgl.Finish();
			if (ticklabel) {
				var t = new TextEngraving("", i+1);
				t.SetAlignment(align_center);
				frontpanel.AddElement(t, x, ticklen + labeldist);
				g.AddElement(t);
			}
			if ( i < (numticks-1) ) {
				for (j=0; j<numsubticks; j++) {
					if (linlog == 0) {			
						sx = size * (i + (j+1) / (numsubticks +1)) / (numticks-1);
					} else {
						sx = size *  Math.log( 1 + 9 * (i + (j+1) / (numsubticks +1)) / (numticks-1) ) / Math.log(10);
					}
					hpgl.ChangePen(pen_subtick);
					hpgl.Start(sx, 0);
					hpgl.LineTo(sx, subticklen);
					hpgl.Finish();
				}
			}
		}
		
	}
	if (baseline) {
		hpgl.ChangePen(pen_base);
		hpgl.Start(x_start, y_start);
		if (shape == 0) hpgl.ArcToMP(x,y, 0,0, (startangle > endangle)?1:0); else hpgl.LineTo(size,0);
		hpgl.Finish();
	}
	var element = hpgl;
	if (ticklabel) {
		g.AddElement(hpgl);
		g.SetRefElement(hpgl);
		frontpanel.AddElement(g,0,0);
		element = g;
	}
	
	// Save settings to ExtInfo
	settings["Shape"] = shape;
	settings["LinLog"] = linlog;
	settings["SAngle"] = startangle;
	settings["EAngle"] = endangle;
	settings["Size"] = size;
	settings["Ticks"] = numticks;
	settings["SubTicks"] = numsubticks;
	settings["TickLen"] = ticklen;
	settings["SubTickLen"] = subticklen;
	settings["BaseLine"] = baseline;
	settings["TickLabel"] = ticklabel;
	settings["LabelDist"] = labeldist;
	element.SetExtInfo("ScaleGen|&#"+settings.toSource());
	if (!is_new) {
		frontpanel.RemoveElement(sel[0]);
	}
	element.MoveTo(alt_x, alt_y);
	frontpanel.SelectElement(element);
}
